{"ast":null,"code":"var _jsxFileName = \"/Users/josh/code/personal/monday/date engine/date engine board view/src/components/SpecificCell.js\";\nimport React, { Component } from \"react\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\nimport \"../styles/SpecificCell.css\"; //Explore more Monday React Components here: https://style.monday.com/\n\nimport Dropdown from \"monday-ui-react-core/dist/Dropdown.js\";\nimport TextField from \"monday-ui-react-core/dist/TextField.js\";\nimport Button from \"monday-ui-react-core/dist/Button.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monday = mondaySdk();\n\nclass SpecificCell extends Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this.getUIoptions = () => {\n      console.log(\"getUIoptions call\");\n      monday.api(\"query ($boardIds: [Int]) { boards (ids:$boardIds) { name id columns { id title type } items { id name } } }\", {\n        variables: {\n          boardIds: this.state.context.boardIds\n        }\n      }).then(res => {\n        this.setState({\n          boardData: res.data\n        });\n        console.log(\"getUIoptions query finish: \", res.data);\n        this.getBoardOptions();\n        this.getDateColumnOptions();\n        this.getItemOptions();\n      });\n    };\n\n    this.getBoardOptions = () => {\n      console.log(\"getBoardOptions call\");\n      const options = this.state.boardData.boards;\n      let arr = [];\n      let boardLabel = \"\";\n      let boardValue = \"\";\n\n      for (let i = 0; i < options.length; i++) {\n        boardLabel = options[i].name;\n        boardValue = options[i].id;\n        arr.push({\n          label: boardLabel,\n          value: boardValue\n        });\n      }\n\n      this.setState({\n        boardOptions: arr\n      });\n      console.log(\"boardopts check: \", this.state.boardOptions);\n    };\n\n    this.getColumnOptions = () => {\n      console.log(\"getDateColumnOptions call\");\n      const options = this.state.boardData.boards[0].columns;\n      let dateArr = [];\n      let numberArr = [];\n      let columnLabel = \"\";\n      let columnValue = \"\";\n\n      for (let i = 0; i < options.length; i++) {\n        columnLabel = options[i].title; // must stay object for type check\n\n        columnValue = options[i]; // add to array if the column is a date column\n\n        if (columnValue.type === \"date\" || columnValue.type === \"lookup\") {\n          dateArr.push({\n            label: columnLabel,\n            value: columnValue.id\n          });\n        } // add to array if the column is a number column\n\n\n        if (columnValue.type === \"number\") {\n          numberArr.push({\n            label: columnLabel,\n            value: columnValue.id\n          });\n        }\n      }\n\n      this.setState({\n        dateColumnOptions: dateArr,\n        numberColumnOptions: numberArr\n      });\n      console.log(\"columnopts check: \", this.state.columnOptions);\n    };\n\n    this.getItemOptions = () => {\n      console.log(\"getItemOptions call\");\n      const options = this.state.boardData.boards[0].items;\n      let arr = [];\n      let itemLabel = \"\";\n      let itemValue = \"\";\n\n      for (let i = 0; i < options.length; i++) {\n        itemLabel = options[i].name;\n        itemValue = options[i].id;\n        arr.push({\n          label: itemLabel,\n          value: itemValue\n        });\n      }\n\n      this.setState({\n        itemOptions: arr\n      });\n      console.log(\"itemopts check: \", this.state.itemOptions);\n    };\n\n    this.getOrigDate = () => {\n      monday.api(\"query ($boardID: [Int], $itemID: [Int], $columnID: [String]) { boards (ids:$boardID) { items (ids:$itemID) { column_values (ids:$columnID) { text } } } }\", {\n        variables: {\n          boardID: parseInt(this.state.boardSelect),\n          columnID: this.state.sourceColumnSelect,\n          itemID: parseInt(this.state.itemSelect)\n        }\n      }).then(res => {\n        const dateText = res.data.boards[0].items[0].column_values[0].text;\n        this.setState({\n          origDateValue: dateText\n        });\n        console.log(\"getOrigDate \", this.state.origDateValue, dateText);\n      });\n    };\n\n    this.updateAll = () => {\n      console.log(\"update function call\");\n      this.getUIoptions();\n      this.getOrigDate();\n      this.setValueSelect();\n      this.manipulateDate();\n    };\n\n    this.updateDate = () => {\n      monday.api(\"mutation ($boardID: Int!, $itemID: Int!, $columnID: String!, $dateValue: JSON!) { change_column_value(board_id:$boardID, item_id: $itemID, column_id: $columnID, value: $dateValue) { id } }\", {\n        variables: {\n          // dateValue: '{\"date\":\"2022-07-02\"}', // works\n          dateValue: '{\"date\":\"' + this.state.finalDateValue + '\"}',\n          boardID: parseInt(this.state.boardSelect),\n          columnID: this.state.targetColumnSelect,\n          itemID: parseInt(this.state.itemSelect)\n        }\n      });\n      console.log(\"date updated\", parseInt(this.state.boardSelect), this.state.targetColumnSelect, parseInt(this.state.itemSelect), this.state.finalDateValue);\n    };\n\n    this.state = {\n      settings: {\n        itemVersion: false,\n        columnVersion: true\n      },\n      context: {},\n      // sets prompts on ui\n      searchOptions: {\n        boardPrompt: \"Board\",\n        targetColumnPrompt: \"Target column\",\n        sourceColumnPrompt: \"Source column\",\n        numberColumnPrompt: \"Number Column\",\n        itemPrompt: \"Item\",\n        datePrompt: \"# of days\"\n      },\n      // holds selection data from ui\n      boardSelect: \"\",\n      sourceColumnSelect: \"\",\n      targetColumnSelect: \"\",\n      itemSelect: \"\",\n      valueSelect: \"\",\n      origDateValue: \"\",\n      finalDateValue: \"\",\n      // holds option data get options methods\n      boardOptions: [],\n      numberColumnOptions: [],\n      dateColumnOptions: [],\n      itemOptions: [],\n      // holds all data from original query\n      boardData: {}\n    };\n  }\n\n  componentDidMount() {\n    // TODO: set up event listeners\n    // listens to changes in settings and sends to getSettings\n    monday.listen(\"settings\", res => {\n      this.setState({\n        settings: res.data\n      });\n      console.log(\"settings listen\", this.state.settings); // {\"fieldName\": \"fieldValue\", \"fieldName2\": \"fieldValue2\"...}\n    }); // listens to context\n\n    monday.listen(\"context\", res => {\n      this.setState({\n        context: res.data\n      });\n      console.log(\"context listen\", res.data);\n      this.getUIoptions();\n    });\n  } // gets the necessary info from server and calls get options functions\n\n\n  // setters that get and set info from ui selections\n  setBoardSelect(e) {\n    this.setState({\n      boardSelect: e.value\n    });\n  }\n\n  setSourceColumnSelect(e) {\n    this.setState({\n      sourceColumnSelect: e.value\n    });\n  }\n\n  setTargetColumnSelect(e) {\n    this.setState({\n      targetColumnSelect: e.value\n    });\n  }\n\n  setItemSelect(e) {\n    this.setState({\n      itemSelect: e.value\n    });\n  }\n\n  setValueSelect() {\n    this.setState({\n      valueSelect: document.getElementById(\"DateChanger\").value\n    });\n  } // functions for changing a date\n\n\n  manipulateDate() {\n    // set variables\n    const numDays = parseInt(this.state.valueSelect); // yyyy-mm-dd\n\n    const origDate = this.state.origDateValue; // convert to date object\n\n    const origDateObj = new Date(this.state.origDateValue); // create final date object (default current date)\n\n    const finalDateObj = new Date(); // calculate final date\n\n    finalDateObj.setDate(origDateObj.getDate() + numDays); // convert back to \"yyyy-mm-dd\"\n\n    const finalDate = finalDateObj.toISOString().split(\"T\")[0]; // set the state value\n\n    this.setState({\n      finalDateValue: finalDate\n    });\n    console.log(\"manipulate date call\", origDate, finalDate);\n  }\n\n  // returns dropdown information\n  renderBoardOptions() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"optionsField\",\n        children: /*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: this.state.searchOptions.boardPrompt,\n          noOptionsMessage: () => \"hit update a few times\",\n          size: Dropdown.size.MEDIUM,\n          options: this.state.boardOptions,\n          onOptionSelect: e => this.setBoardSelect(e) // onOptionSelect={function noRefCheck() {\n          //   console.log(\"dropdown selected\");\n          // }}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"optionsField\",\n        children: /*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: this.state.searchOptions.sourceColumnPrompt,\n          noOptionsMessage: () => \"hit update a few times\",\n          size: Dropdown.size.MEDIUM,\n          options: this.state.columnOptions,\n          onOptionSelect: e => this.setSourceColumnSelect(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"optionsField\",\n        children: /*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: this.state.searchOptions.targetColumnPrompt,\n          noOptionsMessage: () => \"hit update a few times\",\n          size: Dropdown.size.MEDIUM,\n          options: this.state.columnOptions,\n          onOptionSelect: e => this.setTargetColumnSelect(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"optionsField\",\n        children: /*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: this.state.searchOptions.itemPrompt,\n          noOptionsMessage: () => \"hit update a few times\",\n          size: Dropdown.size.MEDIUM,\n          options: this.state.itemOptions,\n          onOptionSelect: e => this.setItemSelect(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this);\n  }\n\n  renderItemVersion() {\n    return this.state.settings.itemVersion ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"optionsField\",\n      children: /*#__PURE__*/_jsxDEV(Dropdown, {\n        placeholder: this.state.searchOptions.itemPrompt,\n        noOptionsMessage: () => \"hit update a few times\",\n        size: Dropdown.size.MEDIUM,\n        options: this.state.itemOptions,\n        onOptionSelect: e => this.setItemSelect(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this) : null;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"specificCell\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"specificCell-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"enter info:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"specificCell-options\",\n        children: [this.renderBoardOptions(), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"DateChanger\",\n          className: \"specificCell-options-inputDate\",\n          placeholder: this.state.searchOptions.datePrompt,\n          size: TextField.sizes.MEDIUM,\n          validation: {\n            text: \"numbers only\" // status: \"error\",\n\n          } // iconName={CloseSmall} // not working?\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"specificCell-options-directions\",\n          children: \"After entering info, please hit Update twice before Get Date.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"specificCell-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: \"button\",\n          size: Button.sizes.MEDIUM,\n          color: Button.colors.POSITIVE,\n          onClick: () => {\n            this.updateAll();\n          },\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: Button.sizes.MEDIUM,\n          color: Button.colors.PRIMARY,\n          onClick: () => {\n            this.updateDate();\n          },\n          children: \"Get Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default SpecificCell;","map":{"version":3,"names":["React","Component","mondaySdk","Dropdown","TextField","Button","monday","SpecificCell","constructor","props","getUIoptions","console","log","api","variables","boardIds","state","context","then","res","setState","boardData","data","getBoardOptions","getDateColumnOptions","getItemOptions","options","boards","arr","boardLabel","boardValue","i","length","name","id","push","label","value","boardOptions","getColumnOptions","columns","dateArr","numberArr","columnLabel","columnValue","title","type","dateColumnOptions","numberColumnOptions","columnOptions","items","itemLabel","itemValue","itemOptions","getOrigDate","boardID","parseInt","boardSelect","columnID","sourceColumnSelect","itemID","itemSelect","dateText","column_values","text","origDateValue","updateAll","setValueSelect","manipulateDate","updateDate","dateValue","finalDateValue","targetColumnSelect","settings","itemVersion","columnVersion","searchOptions","boardPrompt","targetColumnPrompt","sourceColumnPrompt","numberColumnPrompt","itemPrompt","datePrompt","valueSelect","componentDidMount","listen","setBoardSelect","e","setSourceColumnSelect","setTargetColumnSelect","setItemSelect","document","getElementById","numDays","origDate","origDateObj","Date","finalDateObj","setDate","getDate","finalDate","toISOString","split","renderBoardOptions","size","MEDIUM","renderItemVersion","render","sizes","colors","POSITIVE","PRIMARY"],"sources":["/Users/josh/code/personal/monday/date engine/date engine board view/src/components/SpecificCell.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\nimport \"../styles/SpecificCell.css\";\n\n//Explore more Monday React Components here: https://style.monday.com/\nimport Dropdown from \"monday-ui-react-core/dist/Dropdown.js\";\nimport TextField from \"monday-ui-react-core/dist/TextField.js\";\nimport Button from \"monday-ui-react-core/dist/Button.js\";\n\nconst monday = mondaySdk();\n\nclass SpecificCell extends Component {\n  constructor(props) {\n    super(props);\n\n    // Default state\n    this.state = {\n      settings: {\n        itemVersion: false,\n        columnVersion: true,\n      },\n\n      context: {},\n\n      // sets prompts on ui\n      searchOptions: {\n        boardPrompt: \"Board\",\n        targetColumnPrompt: \"Target column\",\n        sourceColumnPrompt: \"Source column\",\n        numberColumnPrompt: \"Number Column\",\n        itemPrompt: \"Item\",\n        datePrompt: \"# of days\",\n      },\n\n      // holds selection data from ui\n      boardSelect: \"\",\n      sourceColumnSelect: \"\",\n      targetColumnSelect: \"\",\n      itemSelect: \"\",\n      valueSelect: \"\",\n      origDateValue: \"\",\n      finalDateValue: \"\",\n\n      // holds option data get options methods\n      boardOptions: [],\n      numberColumnOptions: [],\n      dateColumnOptions: [],\n      itemOptions: [],\n\n      // holds all data from original query\n      boardData: {},\n    };\n  }\n\n  componentDidMount() {\n    // TODO: set up event listeners\n\n    // listens to changes in settings and sends to getSettings\n    monday.listen(\"settings\", (res) => {\n      this.setState({ settings: res.data });\n      console.log(\"settings listen\", this.state.settings);\n      // {\"fieldName\": \"fieldValue\", \"fieldName2\": \"fieldValue2\"...}\n    });\n\n    // listens to context\n    monday.listen(\"context\", (res) => {\n      this.setState({ context: res.data });\n      console.log(\"context listen\", res.data);\n      this.getUIoptions();\n    });\n  }\n\n  // gets the necessary info from server and calls get options functions\n  getUIoptions = () => {\n    console.log(\"getUIoptions call\");\n    monday\n      .api(\n        \"query ($boardIds: [Int]) { boards (ids:$boardIds) { name id columns { id title type } items { id name } } }\",\n        {\n          variables: { boardIds: this.state.context.boardIds },\n        }\n      )\n      .then((res) => {\n        this.setState({ boardData: res.data });\n        console.log(\"getUIoptions query finish: \", res.data);\n        this.getBoardOptions();\n        this.getDateColumnOptions();\n        this.getItemOptions();\n      });\n  };\n\n  /* info getting functions */\n\n  // get the board dropdown options\n  getBoardOptions = () => {\n    console.log(\"getBoardOptions call\");\n    const options = this.state.boardData.boards;\n    let arr = [];\n    let boardLabel = \"\";\n    let boardValue = \"\";\n\n    for (let i = 0; i < options.length; i++) {\n      boardLabel = options[i].name;\n      boardValue = options[i].id;\n      arr.push({ label: boardLabel, value: boardValue });\n    }\n\n    this.setState({\n      boardOptions: arr,\n    });\n\n    console.log(\"boardopts check: \", this.state.boardOptions);\n  };\n\n  // get the column dropdown options\n  getColumnOptions = () => {\n    console.log(\"getDateColumnOptions call\");\n    const options = this.state.boardData.boards[0].columns;\n    let dateArr = [];\n    let numberArr = [];\n    let columnLabel = \"\";\n    let columnValue = \"\";\n\n    for (let i = 0; i < options.length; i++) {\n      columnLabel = options[i].title;\n      // must stay object for type check\n      columnValue = options[i];\n\n      // add to array if the column is a date column\n      if (columnValue.type === \"date\" || columnValue.type === \"lookup\") {\n        dateArr.push({ label: columnLabel, value: columnValue.id });\n      }\n\n      // add to array if the column is a number column\n      if (columnValue.type === \"number\") {\n        numberArr.push({ label: columnLabel, value: columnValue.id });\n      }\n    }\n\n    this.setState({\n      dateColumnOptions: dateArr,\n      numberColumnOptions: numberArr,\n    });\n\n    console.log(\"columnopts check: \", this.state.columnOptions);\n  };\n\n  // get the item dropdown options\n  getItemOptions = () => {\n    console.log(\"getItemOptions call\");\n    const options = this.state.boardData.boards[0].items;\n    let arr = [];\n    let itemLabel = \"\";\n    let itemValue = \"\";\n\n    for (let i = 0; i < options.length; i++) {\n      itemLabel = options[i].name;\n      itemValue = options[i].id;\n      arr.push({ label: itemLabel, value: itemValue });\n    }\n\n    this.setState({\n      itemOptions: arr,\n    });\n\n    console.log(\"itemopts check: \", this.state.itemOptions);\n  };\n\n  // setters that get and set info from ui selections\n\n  setBoardSelect(e) {\n    this.setState({ boardSelect: e.value });\n  }\n\n  setSourceColumnSelect(e) {\n    this.setState({ sourceColumnSelect: e.value });\n  }\n\n  setTargetColumnSelect(e) {\n    this.setState({ targetColumnSelect: e.value });\n  }\n\n  setItemSelect(e) {\n    this.setState({ itemSelect: e.value });\n  }\n\n  setValueSelect() {\n    this.setState({\n      valueSelect: document.getElementById(\"DateChanger\").value,\n    });\n  }\n\n  // functions for changing a date\n\n  getOrigDate = () => {\n    monday\n      .api(\n        \"query ($boardID: [Int], $itemID: [Int], $columnID: [String]) { boards (ids:$boardID) { items (ids:$itemID) { column_values (ids:$columnID) { text } } } }\",\n        {\n          variables: {\n            boardID: parseInt(this.state.boardSelect),\n            columnID: this.state.sourceColumnSelect,\n            itemID: parseInt(this.state.itemSelect),\n          },\n        }\n      )\n      .then((res) => {\n        const dateText = res.data.boards[0].items[0].column_values[0].text;\n        this.setState({ origDateValue: dateText });\n        console.log(\"getOrigDate \", this.state.origDateValue, dateText);\n      });\n  };\n\n  // update button press\n  updateAll = () => {\n    console.log(\"update function call\");\n    this.getUIoptions();\n    this.getOrigDate();\n    this.setValueSelect();\n    this.manipulateDate();\n  };\n\n  manipulateDate() {\n    // set variables\n    const numDays = parseInt(this.state.valueSelect);\n    // yyyy-mm-dd\n    const origDate = this.state.origDateValue;\n    // convert to date object\n    const origDateObj = new Date(this.state.origDateValue);\n    // create final date object (default current date)\n    const finalDateObj = new Date();\n\n    // calculate final date\n    finalDateObj.setDate(origDateObj.getDate() + numDays);\n\n    // convert back to \"yyyy-mm-dd\"\n    const finalDate = finalDateObj.toISOString().split(\"T\")[0];\n\n    // set the state value\n    this.setState({ finalDateValue: finalDate });\n    console.log(\"manipulate date call\", origDate, finalDate);\n  }\n\n  updateDate = () => {\n    monday.api(\n      \"mutation ($boardID: Int!, $itemID: Int!, $columnID: String!, $dateValue: JSON!) { change_column_value(board_id:$boardID, item_id: $itemID, column_id: $columnID, value: $dateValue) { id } }\",\n      {\n        variables: {\n          // dateValue: '{\"date\":\"2022-07-02\"}', // works\n          dateValue: '{\"date\":\"' + this.state.finalDateValue + '\"}',\n          boardID: parseInt(this.state.boardSelect),\n          columnID: this.state.targetColumnSelect,\n          itemID: parseInt(this.state.itemSelect),\n        },\n      }\n    );\n    console.log(\n      \"date updated\",\n      parseInt(this.state.boardSelect),\n      this.state.targetColumnSelect,\n      parseInt(this.state.itemSelect),\n      this.state.finalDateValue\n    );\n  };\n\n  // returns dropdown information\n  renderBoardOptions() {\n    return (\n      <div>\n        <div className=\"optionsField\">\n          <Dropdown\n            placeholder={this.state.searchOptions.boardPrompt}\n            noOptionsMessage={() => \"hit update a few times\"}\n            size={Dropdown.size.MEDIUM}\n            options={this.state.boardOptions}\n            onOptionSelect={(e) => this.setBoardSelect(e)}\n            // onOptionSelect={function noRefCheck() {\n            //   console.log(\"dropdown selected\");\n            // }}\n          />\n        </div>\n        <div className=\"optionsField\">\n          <Dropdown\n            placeholder={this.state.searchOptions.sourceColumnPrompt}\n            noOptionsMessage={() => \"hit update a few times\"}\n            size={Dropdown.size.MEDIUM}\n            options={this.state.columnOptions}\n            onOptionSelect={(e) => this.setSourceColumnSelect(e)}\n          />\n        </div>\n        <div className=\"optionsField\">\n          <Dropdown\n            placeholder={this.state.searchOptions.targetColumnPrompt}\n            noOptionsMessage={() => \"hit update a few times\"}\n            size={Dropdown.size.MEDIUM}\n            options={this.state.columnOptions}\n            onOptionSelect={(e) => this.setTargetColumnSelect(e)}\n          />\n        </div>\n        <div className=\"optionsField\">\n          <Dropdown\n            placeholder={this.state.searchOptions.itemPrompt}\n            noOptionsMessage={() => \"hit update a few times\"}\n            size={Dropdown.size.MEDIUM}\n            options={this.state.itemOptions}\n            onOptionSelect={(e) => this.setItemSelect(e)}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  renderItemVersion() {\n    return this.state.settings.itemVersion ? (\n      <div className=\"optionsField\">\n        <Dropdown\n          placeholder={this.state.searchOptions.itemPrompt}\n          noOptionsMessage={() => \"hit update a few times\"}\n          size={Dropdown.size.MEDIUM}\n          options={this.state.itemOptions}\n          onOptionSelect={(e) => this.setItemSelect(e)}\n        />\n      </div>\n    ) : null;\n  }\n\n  render() {\n    return (\n      <div id=\"specificCell\">\n        <div className=\"specificCell-header\">\n          <h1>enter info:</h1>\n        </div>\n        <div className=\"specificCell-options\">\n          {this.renderBoardOptions()}\n          <TextField\n            id=\"DateChanger\"\n            className=\"specificCell-options-inputDate\"\n            placeholder={this.state.searchOptions.datePrompt}\n            size={TextField.sizes.MEDIUM}\n            validation={{\n              text: \"numbers only\",\n              // status: \"error\",\n            }}\n            // iconName={CloseSmall} // not working?\n          />\n          <p className=\"specificCell-options-directions\">\n            After entering info, please hit Update twice before Get Date.\n          </p>\n        </div>\n        <div className=\"specificCell-buttons\">\n          <Button\n            className=\"button\"\n            size={Button.sizes.MEDIUM}\n            color={Button.colors.POSITIVE}\n            onClick={() => {\n              this.updateAll();\n            }}\n          >\n            Update\n          </Button>\n          <Button\n            size={Button.sizes.MEDIUM}\n            color={Button.colors.PRIMARY}\n            onClick={() => {\n              this.updateDate();\n            }}\n          >\n            Get Date\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SpecificCell;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
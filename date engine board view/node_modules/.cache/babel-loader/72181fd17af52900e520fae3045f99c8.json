{"ast":null,"code":"var _jsxFileName = \"/Users/josh/code/personal/monday/quickstart-react/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\"; //Explore more Monday React Components here: https://style.monday.com/\n\nimport Search from \"monday-ui-react-core/dist/Search.js\";\nimport TextField from \"monday-ui-react-core/dist/TextField.js\";\nimport Button from \"monday-ui-react-core/dist/Button.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monday = mondaySdk();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this.getSettings = res => {\n      this.setState({\n        settings: res.data\n      });\n      console.log(\"settings!\", res);\n    };\n\n    this.getItemInfo = itemID => {\n      monday.api(\"query ($boardIDs: [Int], $itemID: [Int]) { boards (ids:$boardIds) { items (ids:$itemID) { name id column_values { id title type text } } } }\", {\n        variables: {\n          boardIds: this.state.context.boardIds,\n          itemID: itemID\n        }\n      }).then(res => {\n        console.log(\"item info:\", res);\n      });\n    };\n\n    this.getDateColumnInfo = res => {\n      console.log(\"detail\", res.data.boards[0].columns);\n      let dateIds = [];\n\n      for (let i = 0; i < res.data.boards[0].columns.length; i++) {\n        let tempPair = [];\n\n        if (res.data.boards[0].columns[i].type === \"date\") {\n          this.state.dateColumns.push(res.data.boards[0].columns[i].title);\n          tempPair = [res.data.boards[0].columns[i].title, res.data.boards[0].columns[i].id];\n          dateIds.push(tempPair);\n        }\n      }\n\n      this.setState({\n        dateIDS: dateIds\n      });\n      console.log(\"id array\", dateIds);\n      console.log(\"date columns\", this.state.dateColumns); // const st = dateIds;\n      // return st;\n    };\n\n    this.functionTest = () => {\n      alert(\"hehe\");\n    };\n\n    this.state = {\n      settings: {\n        text: \"Column Title\",\n        columnName: \"date\"\n      },\n      context: {},\n      boardContext: {},\n      boards: [],\n      dateIDS: [],\n      dateColumns: [],\n      itemIds: []\n    };\n  }\n\n  componentDidMount() {\n    // TODO: set up event listeners\n    // listens to changes in settings and sends to getSettings\n    monday.listen(\"settings\", res => {\n      console.log(\"settings early\", res.data);\n      this.getSettings(res); // {\"fieldName\": \"fieldValue\", \"fieldName2\": \"fieldValue2\"...}\n    }); // monday.listen(\"settings\", (res) => {\n    //   console.log(\"update\", res.data);\n    //   this.updateDate();\n    //   // {\"fieldName\": \"fieldValue\", \"fieldName2\": \"fieldValue2\"...}\n    // });\n\n    monday.listen(\"context\", res => {\n      this.setState({\n        context: res.data\n      });\n      console.log(\"context early\", res.data);\n      monday.api(\"query ($boardIDs: [Int]) { boards (ids:$boardIds) name type { items { name id column_values { id type } } } }\", // \"query ($boardIds: [Int]) { boards (ids:$boardIds) { columns { id type title } } }\",\n      {\n        variables: {\n          boardIds: this.state.context.boardIds\n        }\n      }).then(res => {\n        this.setState({\n          boardData: res.data\n        });\n        console.log(\"here!\", res);\n        this.getDateColumnInfo(res);\n      }); // console.log(\"items time\");\n      // monday\n      //   .api(\n      //     \"query ($boardIds: [Int]) { boards (ids:$boardIds) { items (limit: 1) { id } } }\",\n      //     { variables: { boardIds: this.state.context.boardIds } }\n      //   )\n      //   .then((res) => {\n      //     this.setState({ boardData: res.data });\n      //     console.log(\"new item id value\", res);\n      //     this.getDateColumnInfo(res);\n      //   });\n    });\n  }\n\n  // updateDate = () => {\n  //   monday.api(\n  //     'mutation ($boardID: [Int], $itemID: [String], $columnID) change_column_value(board_id:$boardID, item_id: $itemID, column_id: $columnID, value: \"{\"date\":\"2022-07-21\"}\") { id } }',\n  //     {\n  //       variables: {\n  //         boardID: this.state.context.boardIds,\n  //         itemID: this.state.dateIDS[0],\n  //       },\n  //       columnID: this.state.dateColumns[0],\n  //     }\n  //   );\n  //   console.log(\"end mutation\");\n  // };\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mainSection\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"enter info:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"optionsField\",\n            children: /*#__PURE__*/_jsxDEV(Search, {\n              placeholder: this.state.settings.text,\n              size: Search.sizes.MEDIUM\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"optionsField\",\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              placeholder: \"\\xB1 Days\",\n              size: TextField.sizes.MEDIUM\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"optionsField\",\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              placeholder: \"MM/DD/YYYY\",\n              size: TextField.sizes.MEDIUM,\n              type: TextField.types.DATE\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              size: Button.sizes.MEDIUM,\n              color: Button.colors.POSITIVE,\n              onClick: () => {\n                this.getItemInfo(3360451747);\n              },\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","mondaySdk","Search","TextField","Button","monday","App","Component","constructor","props","getSettings","res","setState","settings","data","console","log","getItemInfo","itemID","api","variables","boardIds","state","context","then","getDateColumnInfo","boards","columns","dateIds","i","length","tempPair","type","dateColumns","push","title","id","dateIDS","functionTest","alert","text","columnName","boardContext","itemIds","componentDidMount","listen","boardData","render","sizes","MEDIUM","types","DATE","colors","POSITIVE"],"sources":["/Users/josh/code/personal/monday/quickstart-react/src/App.js"],"sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\n//Explore more Monday React Components here: https://style.monday.com/\nimport Search from \"monday-ui-react-core/dist/Search.js\";\nimport TextField from \"monday-ui-react-core/dist/TextField.js\";\nimport Button from \"monday-ui-react-core/dist/Button.js\";\n\nconst monday = mondaySdk();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Default state\n    this.state = {\n      settings: {\n        text: \"Column Title\",\n        columnName: \"date\",\n      },\n      context: {},\n      boardContext: {},\n      boards: [],\n      dateIDS: [],\n      dateColumns: [],\n      itemIds: [],\n    };\n  }\n\n  componentDidMount() {\n    // TODO: set up event listeners\n\n    // listens to changes in settings and sends to getSettings\n    monday.listen(\"settings\", (res) => {\n      console.log(\"settings early\", res.data);\n      this.getSettings(res);\n      // {\"fieldName\": \"fieldValue\", \"fieldName2\": \"fieldValue2\"...}\n    });\n\n    // monday.listen(\"settings\", (res) => {\n    //   console.log(\"update\", res.data);\n    //   this.updateDate();\n    //   // {\"fieldName\": \"fieldValue\", \"fieldName2\": \"fieldValue2\"...}\n    // });\n\n    monday.listen(\"context\", (res) => {\n      this.setState({ context: res.data });\n      console.log(\"context early\", res.data);\n      monday\n        .api(\n          \"query ($boardIDs: [Int]) { boards (ids:$boardIds) name type { items { name id column_values { id type } } } }\",\n          // \"query ($boardIds: [Int]) { boards (ids:$boardIds) { columns { id type title } } }\",\n          { variables: { boardIds: this.state.context.boardIds } }\n        )\n        .then((res) => {\n          this.setState({ boardData: res.data });\n          console.log(\"here!\", res);\n          this.getDateColumnInfo(res);\n        });\n\n      // console.log(\"items time\");\n      // monday\n      //   .api(\n      //     \"query ($boardIds: [Int]) { boards (ids:$boardIds) { items (limit: 1) { id } } }\",\n      //     { variables: { boardIds: this.state.context.boardIds } }\n      //   )\n      //   .then((res) => {\n      //     this.setState({ boardData: res.data });\n      //     console.log(\"new item id value\", res);\n      //     this.getDateColumnInfo(res);\n      //   });\n    });\n  }\n\n  getSettings = (res) => {\n    this.setState({ settings: res.data });\n    console.log(\"settings!\", res);\n  };\n\n  // basic retrieve item info by id\n  /**\n   * retrievs item info by id #\n   * @param {*} res\n   * @param {*} itemID\n   * @return id (string), name (string), column values: (column id (string), column title (string), type (string), text (string))\n   */\n  getItemInfo = (itemID) => {\n    monday\n      .api(\n        \"query ($boardIDs: [Int], $itemID: [Int]) { boards (ids:$boardIds) { items (ids:$itemID) { name id column_values { id title type text } } } }\",\n        { variables: { boardIds: this.state.context.boardIds, itemID: itemID } }\n      )\n      .then((res) => {\n        console.log(\"item info:\", res);\n      });\n  };\n\n  // context \\/\n\n  getDateColumnInfo = (res) => {\n    console.log(\"detail\", res.data.boards[0].columns);\n    let dateIds = [];\n    for (let i = 0; i < res.data.boards[0].columns.length; i++) {\n      let tempPair = [];\n      if (res.data.boards[0].columns[i].type === \"date\") {\n        this.state.dateColumns.push(res.data.boards[0].columns[i].title);\n        tempPair = [\n          res.data.boards[0].columns[i].title,\n          res.data.boards[0].columns[i].id,\n        ];\n        dateIds.push(tempPair);\n      }\n    }\n    this.setState({ dateIDS: dateIds });\n    console.log(\"id array\", dateIds);\n    console.log(\"date columns\", this.state.dateColumns);\n\n    // const st = dateIds;\n    // return st;\n  };\n\n  functionTest = () => {\n    alert(\"hehe\");\n  };\n\n  // updateDate = () => {\n  //   monday.api(\n  //     'mutation ($boardID: [Int], $itemID: [String], $columnID) change_column_value(board_id:$boardID, item_id: $itemID, column_id: $columnID, value: \"{\"date\":\"2022-07-21\"}\") { id } }',\n  //     {\n  //       variables: {\n  //         boardID: this.state.context.boardIds,\n  //         itemID: this.state.dateIDS[0],\n  //       },\n  //       columnID: this.state.dateColumns[0],\n  //     }\n  //   );\n  //   console.log(\"end mutation\");\n  // };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"mainSection\">\n          <div className=\"header\">\n            <h1>enter info:</h1>\n          </div>\n          <div className=\"options\">\n            <div className=\"optionsField\">\n              <Search\n                placeholder={this.state.settings.text}\n                size={Search.sizes.MEDIUM}\n              />\n            </div>\n            <div className=\"optionsField\">\n              <TextField placeholder=\"± Days\" size={TextField.sizes.MEDIUM} />\n            </div>\n            <div className=\"optionsField\">\n              <TextField\n                placeholder=\"MM/DD/YYYY\"\n                size={TextField.sizes.MEDIUM}\n                type={TextField.types.DATE}\n              />\n            </div>\n            <div className=\"button\">\n              <Button\n                size={Button.sizes.MEDIUM}\n                color={Button.colors.POSITIVE}\n                onClick={() => {\n                  this.getItemInfo(3360451747);\n                }}\n              >\n                Update\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/josh/code/personal/monday/date engine/date engine board view/src/components/Selections.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"../styles/Selections.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\nimport Dropdown from \"monday-ui-react-core/dist/Dropdown.js\";\nimport TextField from \"monday-ui-react-core/dist/TextField.js\";\nimport Button from \"monday-ui-react-core/dist/Button.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monday = mondaySdk();\n\nconst Selections = () => {\n  _s();\n\n  const [context, setContext] = useState();\n  const [boardData, setBoardData] = useState();\n  const [sourceColumnOpts, setSourceColumnOpts] = useState();\n  useEffect(() => {\n    // Notice this method notifies the monday platform that user gains a first value in an app.\n    // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n    monday.execute(\"valueCreatedForUser\"); // TODO: set up event listeners, Here`s an example, read more here: https://developer.monday.com/apps/docs/mondaylisten/\n\n    monday.listen(\"context\", res => {\n      setContext(res.data);\n      console.log(res.data); // get board data and assign state value\n\n      monday.api(\"query ($boardIds: [Int]) { boards (ids:$boardIds) { name id columns { id title type } items { id name } } }\", {\n        variables: {\n          boardIds: res.data.boardIds\n        }\n      }).then(res => {\n        setBoardData(res.data);\n        console.log(\"query finish: \", res.data.boards);\n        getSourceColumnOpts(res); // this.getBoardOptions();\n        // this.getDateColumnOptions();\n        // this.getItemOptions();\n      });\n    });\n  }, []); //Some example what you can do with context, read more here: https://developer.monday.com/apps/docs/mondayget#requesting-context-and-settings-data\n\n  const attentionBoxText = `Hello, your user_id is: ${context ? context.user.id : \"still loading\"}.\n  Let's start building your amazing app, which will change the world!`;\n\n  const getSourceColumnOpts = res => {\n    let arr = [];\n    let options = res.data.boards[0].columns;\n    console.log(\"source column array\", options);\n\n    for (let i = 0; i < options.length; i++) {\n      // type \"lookup\" for mirror support\n      if (options[i].type === \"date\" || options[i].type === \"lookup\") {\n        arr.push({\n          label: options[i].title,\n          value: options[i].id\n        });\n      }\n    }\n\n    setSourceColumnOpts(arr);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n      className: \"dropdown-board\",\n      placeholder: \"Source Column\",\n      noOptionsMessage: () => \"hit update a few times\",\n      size: Dropdown.size.MEDIUM,\n      options: sourceColumnOpts // onOptionSelect={(e) => this.setBoardSelect(e)}\n      // onOptionSelect={function noRefCheck() {\n      //   console.log(\"dropdown selected\");\n      // }}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderButtons()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n\n  renderButtons = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        className: \"button-update\",\n        size: Button.sizes.MEDIUM,\n        color: Button.colors.POSITIVE,\n        onClick: () => {\n          this.updateAll();\n        },\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"button-submit\",\n        size: Button.sizes.MEDIUM,\n        color: Button.colors.PRIMARY,\n        onClick: () => {\n          this.updateDate();\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  };\n};\n\n_s(Selections, \"bp9qq4mvFV10p4h6aX/pPZvANyw=\");\n\n_c = Selections;\nexport default Selections;\n\nvar _c;\n\n$RefreshReg$(_c, \"Selections\");","map":{"version":3,"names":["React","useState","useEffect","mondaySdk","Dropdown","TextField","Button","monday","Selections","context","setContext","boardData","setBoardData","sourceColumnOpts","setSourceColumnOpts","execute","listen","res","data","console","log","api","variables","boardIds","then","boards","getSourceColumnOpts","attentionBoxText","user","id","arr","options","columns","i","length","type","push","label","title","value","size","MEDIUM","renderButtons","sizes","colors","POSITIVE","updateAll","PRIMARY","updateDate"],"sources":["/Users/josh/code/personal/monday/date engine/date engine board view/src/components/Selections.js"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"../styles/Selections.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\n\nimport Dropdown from \"monday-ui-react-core/dist/Dropdown.js\";\nimport TextField from \"monday-ui-react-core/dist/TextField.js\";\nimport Button from \"monday-ui-react-core/dist/Button.js\";\n\nconst monday = mondaySdk();\n\nconst Selections = () => {\n  const [context, setContext] = useState();\n  const [boardData, setBoardData] = useState();\n  const [sourceColumnOpts, setSourceColumnOpts] = useState();\n\n  useEffect(() => {\n    // Notice this method notifies the monday platform that user gains a first value in an app.\n    // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n    monday.execute(\"valueCreatedForUser\");\n\n    // TODO: set up event listeners, Here`s an example, read more here: https://developer.monday.com/apps/docs/mondaylisten/\n    monday.listen(\"context\", (res) => {\n      setContext(res.data);\n      console.log(res.data);\n      // get board data and assign state value\n      monday\n        .api(\n          \"query ($boardIds: [Int]) { boards (ids:$boardIds) { name id columns { id title type } items { id name } } }\",\n          {\n            variables: { boardIds: res.data.boardIds },\n          }\n        )\n        .then((res) => {\n          setBoardData(res.data);\n          console.log(\"query finish: \", res.data.boards);\n          getSourceColumnOpts(res);\n          // this.getBoardOptions();\n          // this.getDateColumnOptions();\n          // this.getItemOptions();\n        });\n    });\n  }, []);\n\n  //Some example what you can do with context, read more here: https://developer.monday.com/apps/docs/mondayget#requesting-context-and-settings-data\n  const attentionBoxText = `Hello, your user_id is: ${\n    context ? context.user.id : \"still loading\"\n  }.\n  Let's start building your amazing app, which will change the world!`;\n\n  const getSourceColumnOpts = (res) => {\n    let arr = [];\n    let options = res.data.boards[0].columns;\n    console.log(\"source column array\", options);\n    for (let i = 0; i < options.length; i++) {\n      // type \"lookup\" for mirror support\n      if (options[i].type === \"date\" || options[i].type === \"lookup\") {\n        arr.push({ label: options[i].title, value: options[i].id });\n      }\n    }\n    setSourceColumnOpts(arr);\n  };\n\n  return (\n    <div className=\"App\">\n      <Dropdown\n        className=\"dropdown-board\"\n        placeholder={\"Source Column\"}\n        noOptionsMessage={() => \"hit update a few times\"}\n        size={Dropdown.size.MEDIUM}\n        options={sourceColumnOpts}\n        // onOptionSelect={(e) => this.setBoardSelect(e)}\n        // onOptionSelect={function noRefCheck() {\n        //   console.log(\"dropdown selected\");\n        // }}\n      />\n      <div>{renderButtons()}</div>\n    </div>\n  );\n\n  renderButtons = () => {\n    return (\n      <div>\n        <Button\n          className=\"button-update\"\n          size={Button.sizes.MEDIUM}\n          color={Button.colors.POSITIVE}\n          onClick={() => {\n            this.updateAll();\n          }}\n        >\n          Update\n        </Button>\n        <Button\n          className=\"button-submit\"\n          size={Button.sizes.MEDIUM}\n          color={Button.colors.PRIMARY}\n          onClick={() => {\n            this.updateDate();\n          }}\n        >\n          Submit\n        </Button>\n      </div>\n    );\n  };\n};\n\nexport default Selections;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}